import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
//import scala.collection.parallel.immutable._
//import scala.collection.parallel.mutable._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Solution {

    // Complete the compareTriplets function below.
    def compareTriplets(a: Array[Int], b: Array[Int]): Array[Int] = {
        var aliceScore = 0
        var BobScore = 0
        var arr = new scala.collection.mutable.ArrayBuffer[Int]()
        for (i <- a.indices) {
            a(i) match {
                case x if x > b(i) => aliceScore += 1
                case x if x < b(i) => BobScore += 1
                case _ => ()
                }
        }
        arr += aliceScore
        arr += BobScore
        arr.toArray
    }
    
    /*
     -------- or -------
    var score = a.zip(b)
        val result = score.map {
                            case(a,b) => if(a>b) (1,0) else if (a<b) (0,1) else (0,0) }
                           .reduce(
                               (x,y) => (x._1+y._1, x._2+y._2))
        result.productIterator.map(x => x.toString.toInt).toArray
    */

    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val a = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)

        val b = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)
        val result = compareTriplets(a, b)

        printWriter.println(result.mkString(" "))

        printWriter.close()
    }
}
