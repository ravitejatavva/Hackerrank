package com.scala.learning

import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.collection.parallel.immutable._
import scala.collection.parallel.mutable._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._
  object kDifference {

    /*
     * Complete the 'kDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY a
     *  2. INTEGER k
     */
    def main(args: Array[String]): Unit = {

      def kDiff(a: Array[Int], k: Int): Int = {
        // Write your code here
        val arrOfTuples: Array[Tuple2[Int,Int]] = for(x <- a; y <- a) yield(x,y)

        val  kPairs = arrOfTuples.filter(x => (x._1 - x._2 == k))
        kPairs.length
      }

      val a = Array(2,4,6,8,10,12)
      val k = 2
      val result = kDiff(a,k)
      println(result)

    }
  }

/*
  object Solution {
    def main(args: Array[String]) {
      val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

      val aCount = StdIn.readLine.trim.toInt

      val a = Array.ofDim[Int](aCount)

      for (i <- 0 until aCount) {
        val aItem = StdIn.readLine.trim.toInt
        a(i) = aItem
      }

      val k = StdIn.readLine.trim.toInt

      val result = Result.kDifference(a, k)

      printWriter.println(result)

      printWriter.close()
    }
  }
*/
